{"version":3,"sources":["services/users.service.js"],"names":["service","secret","process","env","SECRET","auth","email","password","deferred","defer","authenticate","findOne","hash","admin","err","user","compare","then","res","resolve","token","sign","sub","_id","isAdmin","reject","catch","e","name","message","promise","list","find","users","getById","console","log","findById","countUsers","count","create","userParam","createUser","hashSync","newUser","created_at","Date","updated_at","save","update","findByIdAndUpdate","_delete","findByIdAndRemove","delete"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,UAAU,EAAhB;;AAEA,IAAMC,SAASC,QAAQC,GAAR,CAAYC,MAA3B;;AAEA,IAAMC,OAAO,SAAPA,IAAO,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAChC,MAAMC,WAAW,YAAEC,KAAF,EAAjB;;AAEA,MAAMC,eAAe,SAAfA,YAAe,GAAM;AACzB,wBAAMC,OAAN,CAAc,EAAEL,YAAF,EAAd,EAAyB,EAAEM,MAAM,CAAR,EAAWC,OAAO,CAAlB,EAAzB,EAAgD,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC7D,yBAAOC,OAAP,CAAeT,QAAf,EAAyBQ,KAAKH,IAA9B,EACCK,IADD,CACM,UAACC,GAAD,EAAS;AACb,YAAIH,QAAQG,GAAZ,EAAiBV,SAASW,OAAT,CAAiB,EAAEC,OAAO,uBAAIC,IAAJ,CAAS,EAAEC,KAAKP,KAAKQ,GAAZ,EAAT,EAA4BtB,MAA5B,CAAT,EAA8CuB,SAAST,KAAKF,KAA5D,EAAjB;AACjB,YAAI,CAACK,GAAL,EAAUV,SAASiB,MAAT,CAAgB,qBAAhB,EAAV,KACKjB,SAASW,OAAT,CAAiB,uBAAjB;AACN,OALD,EAMCO,KAND,CAMO;AAAA,eAAKlB,SAASiB,MAAT,CAAmBE,EAAEC,IAArB,WAA+BD,EAAEE,OAAjC,CAAL;AAAA,OANP;AAOA,UAAIf,GAAJ,EAASN,SAASiB,MAAT,CAAmBX,IAAIc,IAAvB,WAAiCd,IAAIe,OAArC;AACV,KATD;AAUD,GAXD;;AAaA,sBAAMlB,OAAN,CAAc,EAAEL,YAAF,EAAd,EAAyB,UAACQ,GAAD,EAAMC,IAAN,EAAe;AACtC,QAAI,CAACA,IAAL,EAAWP,SAASiB,MAAT,aAA0BnB,KAA1B;AACX,QAAIQ,GAAJ,EAASN,SAASiB,MAAT,CAAmBX,IAAIc,IAAvB,WAAiCd,IAAIe,OAArC,UAAiDf,GAAjD,EAAT,KACKJ;AACN,GAJD;;AAMA,SAAOF,SAASsB,OAAhB;AACD,CAvBD;;AAyBA,IAAMC,OAAO,SAAPA,IAAO,GAAM;AACjB,MAAMvB,WAAW,YAAEC,KAAF,EAAjB;;AAEA,sBAAMuB,IAAN,CAAW,EAAX,EAAe,EAAEpB,MAAM,CAAR,EAAf,EAA4B,UAACE,GAAD,EAAMmB,KAAN,EAAgB;AAC1C,QAAInB,GAAJ,EAASN,SAASiB,MAAT,CAAmBX,IAAIc,IAAvB,WAAiCd,IAAIe,OAArC;AACT,QAAII,KAAJ,EAAWzB,SAASW,OAAT,CAAiBc,KAAjB,EAAX,KACKzB,SAASW,OAAT,CAAiB,uBAAjB;AACN,GAJD;;AAMA,SAAOX,SAASsB,OAAhB;AACD,CAVD;;AAYA,IAAMI,UAAU,SAAVA,OAAU,CAACX,GAAD,EAAS;AACvB,MAAMf,WAAW,YAAEC,KAAF,EAAjB;AACA0B,UAAQC,GAAR,CAAYb,GAAZ;AACA,sBAAMc,QAAN,CAAed,GAAf,EAAoB,EAAEX,MAAM,CAAR,EAApB,EAAiC,UAACE,GAAD,EAAMC,IAAN,EAAe;AAC9C,QAAID,GAAJ,EAASN,SAASiB,MAAT,CAAmBX,IAAIc,IAAvB,WAAiCd,IAAIe,OAArC;AACT,QAAId,IAAJ,EAAUP,SAASW,OAAT,CAAiBJ,IAAjB,EAAV,KACKP,SAASW,OAAT,CAAiB,uBAAjB;AACN,GAJD;;AAMA,SAAOX,SAASsB,OAAhB;AACD,CAVD;;AAYA,IAAMQ,aAAa,SAAbA,UAAa,GAAM;AACvB,MAAM9B,WAAW,YAAEC,KAAF,EAAjB;;AAEA,sBAAM8B,KAAN,CAAY,EAAZ,EAAgB,UAACzB,GAAD,EAAMyB,KAAN,EAAgB;AAC9B,QAAIzB,GAAJ,EAASN,SAASiB,MAAT,CAAmBX,IAAIc,IAAvB,WAAiCd,IAAIe,OAArC;AACT,QAAIU,KAAJ,EAAW/B,SAASW,OAAT,CAAiBoB,KAAjB,EAAX,KACK/B,SAASW,OAAT,CAAiB,uBAAjB;AACN,GAJD;;AAMA,SAAOX,SAASsB,OAAhB;AACD,CAVD;;AAYA,IAAMU,SAAS,SAATA,MAAS,CAACC,SAAD,EAAe;AAC5B,MAAMjC,WAAW,YAAEC,KAAF,EAAjB;;AAEA,MAAMiC,aAAa,SAAbA,UAAa,GAAM;AACvBD,cAAU7B,IAAV,GAAiB,mBAAO+B,QAAP,CAAgBF,UAAUlC,QAA1B,EAAoC,EAApC,CAAjB;;AAEA,QAAI,CAACkC,UAAU5B,KAAf,EAAsB4B,UAAU5B,KAAV,GAAkB,KAAlB;;AAEtB,QAAM+B,UAAU,wBAAU;AACxBtC,aAAOmC,UAAUnC,KADO;AAExBM,YAAM6B,UAAU7B,IAFQ;AAGxBC,aAAO4B,UAAU5B,KAHO;AAIxBgC,kBAAY,IAAIC,IAAJ,EAJY;AAKxBC,kBAAY,IAAID,IAAJ,EALY,EAAV,CAAhB;;AAOAF,YAAQI,IAAR,CAAa,UAAClC,GAAD,EAAS;AACpB,UAAIA,GAAJ,EAASN,SAASiB,MAAT,CAAmBX,IAAIc,IAAvB,WAAiCd,IAAIe,OAArC,EAAT,KACKrB,SAASW,OAAT,CAAiB,2BAAjB;AACN,KAHD;AAID,GAhBD;;AAkBA,sBAAMR,OAAN,CAAc,EAAEL,OAAOmC,UAAUnC,KAAnB,EAAd,EAA0C,UAACQ,GAAD,EAAMC,IAAN,EAAe;AACvD,QAAIA,IAAJ,EAAUP,SAASiB,MAAT,aAA0BgB,UAAUnC,KAApC;AACV,QAAIQ,GAAJ,EAASN,SAASiB,MAAT,CAAmBX,IAAIc,IAAvB,WAAiCd,IAAIe,OAArC,UAAiDf,GAAjD,EAAT,KACK4B;AACN,GAJD;;AAMA,SAAOlC,SAASsB,OAAhB;AACD,CA5BD;;AA8BA,IAAMmB,SAAS,SAATA,MAAS,CAAC1B,GAAD,EAAMkB,SAAN,EAAoB;AACjC,MAAMjC,WAAW,YAAEC,KAAF,EAAjB;;AAEAgC,YAAUM,UAAV,GAAuB,IAAID,IAAJ,EAAvB;;AAEA,MAAIL,UAAUlC,QAAd,EAAwBkC,UAAU7B,IAAV,GAAiB,mBAAO+B,QAAP,CAAgBF,UAAUlC,QAA1B,EAAoC,EAApC,CAAjB;;AAExB,sBAAM2C,iBAAN,CAAwB3B,GAAxB,EAA6BkB,SAA7B,EAAwC,UAAC3B,GAAD,EAAS;AAC/C,QAAIA,GAAJ,EAASN,SAASiB,MAAT,CAAmBX,IAAIc,IAAvB,WAAiCd,IAAIe,OAArC,EAAT,KACKrB,SAASW,OAAT,CAAiB,wBAAjB;AACN,GAHD;;AAKA,SAAOX,SAASsB,OAAhB;AACD,CAbD;;AAeA,IAAMqB,UAAU,SAAVA,OAAU,CAAC5B,GAAD,EAAS;AACvB,MAAMf,WAAW,YAAEC,KAAF,EAAjB;;AAEA,sBAAM2C,iBAAN,CAAwB7B,GAAxB,EAA6B,UAACT,GAAD,EAAS;AACpC,QAAIA,GAAJ,EAASN,SAASiB,MAAT,CAAmBX,IAAIc,IAAvB,WAAiCd,IAAIe,OAArC,EAAT,KACKrB,SAASW,OAAT,CAAiB,wBAAjB;AACN,GAHD;;AAKA,SAAOX,SAASsB,OAAhB;AACD,CATD;;AAWA9B,QAAQK,IAAR,GAAeA,IAAf;AACAL,QAAQ+B,IAAR,GAAeA,IAAf;AACA/B,QAAQuC,KAAR,GAAgBD,UAAhB;AACAtC,QAAQkC,OAAR,GAAkBA,OAAlB;AACAlC,QAAQwC,MAAR,GAAiBA,MAAjB;AACAxC,QAAQiD,MAAR,GAAiBA,MAAjB;AACAjD,QAAQqD,MAAR,GAAiBF,OAAjB;;kBAEenD,O","file":"users.service.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport Q from 'q';\nimport { users as Users } from '../models/db-connection';\n\nconst service = {};\n\nconst secret = process.env.SECRET;\n\nconst auth = (email, password) => {\n  const deferred = Q.defer();\n\n  const authenticate = () => {\n    Users.findOne({ email }, { hash: 1, admin: 1 }, (err, user) => {\n      bcrypt.compare(password, user.hash)\n      .then((res) => {\n        if (user && res) deferred.resolve({ token: jwt.sign({ sub: user._id }, secret), isAdmin: user.admin });\n        if (!res) deferred.reject('Password incorrect!');\n        else deferred.resolve('Nothing to show here!');\n      })\n      .catch(e => deferred.reject(`${e.name} : ${e.message}`));\n      if (err) deferred.reject(`${err.name} : ${err.message}`);\n    });\n  };\n\n  Users.findOne({ email }, (err, user) => {\n    if (!user) deferred.reject(`E-mail ${email} not exist.`);\n    if (err) deferred.reject(`${err.name} : ${err.message}: ${err}`);\n    else authenticate();\n  });\n\n  return deferred.promise;\n};\n\nconst list = () => {\n  const deferred = Q.defer();\n\n  Users.find({}, { hash: 0 }, (err, users) => {\n    if (err) deferred.reject(`${err.name} : ${err.message}`);\n    if (users) deferred.resolve(users);\n    else deferred.resolve('Nothing to show here!');\n  });\n\n  return deferred.promise;\n};\n\nconst getById = (_id) => {\n  const deferred = Q.defer();\n  console.log(_id);\n  Users.findById(_id, { hash: 0 }, (err, user) => {\n    if (err) deferred.reject(`${err.name} : ${err.message}`);\n    if (user) deferred.resolve(user);\n    else deferred.resolve('Nothing to show here!');\n  });\n\n  return deferred.promise;\n};\n\nconst countUsers = () => {\n  const deferred = Q.defer();\n\n  Users.count({}, (err, count) => {\n    if (err) deferred.reject(`${err.name} : ${err.message}`);\n    if (count) deferred.resolve(count);\n    else deferred.resolve('Nothing to show here!');\n  });\n\n  return deferred.promise;\n};\n\nconst create = (userParam) => {\n  const deferred = Q.defer();\n\n  const createUser = () => {\n    userParam.hash = bcrypt.hashSync(userParam.password, 10);\n\n    if (!userParam.admin) userParam.admin = false;\n\n    const newUser = new Users({\n      email: userParam.email,\n      hash: userParam.hash,\n      admin: userParam.admin,\n      created_at: new Date(),\n      updated_at: new Date() });\n\n    newUser.save((err) => {\n      if (err) deferred.reject(`${err.name} : ${err.message}`);\n      else deferred.resolve('Successful user creation.');\n    });\n  };\n\n  Users.findOne({ email: userParam.email }, (err, user) => {\n    if (user) deferred.reject(`E-mail ${userParam.email} is already taken.`);\n    if (err) deferred.reject(`${err.name} : ${err.message}: ${err}`);\n    else createUser();\n  });\n\n  return deferred.promise;\n};\n\nconst update = (_id, userParam) => {\n  const deferred = Q.defer();\n\n  userParam.updated_at = new Date();\n\n  if (userParam.password) userParam.hash = bcrypt.hashSync(userParam.password, 10);\n\n  Users.findByIdAndUpdate(_id, userParam, (err) => {\n    if (err) deferred.reject(`${err.name} : ${err.message}`);\n    else deferred.resolve('User has been updated.');\n  });\n\n  return deferred.promise;\n};\n\nconst _delete = (_id) => {\n  const deferred = Q.defer();\n\n  Users.findByIdAndRemove(_id, (err) => {\n    if (err) deferred.reject(`${err.name} : ${err.message}`);\n    else deferred.resolve('User has been deleted.');\n  });\n\n  return deferred.promise;\n};\n\nservice.auth = auth;\nservice.list = list;\nservice.count = countUsers;\nservice.getById = getById;\nservice.create = create;\nservice.update = update;\nservice.delete = _delete;\n\nexport default service;\n"]}